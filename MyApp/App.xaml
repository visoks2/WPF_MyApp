<Application x:Class="MyApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:showMeTheXaml="clr-namespace:ShowMeTheXAML;assembly=ShowMeTheXAML"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
             xmlns:smtxAe="clr-namespace:ShowMeTheXAML.AvalonEdit;assembly=ShowMeTheXAML.AvalonEdit"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:MyApp"
             xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             xmlns:conv="clr-namespace:MyApp.Converters"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
                <ResourceDictionary Source="pack://application:,,,/ShowMeTheXAML.AvalonEdit;component/Themes/xamldisplayer.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"></conv:InverseBooleanConverter>

            <Style TargetType="showMeTheXaml:XamlDisplay" BasedOn="{StaticResource {x:Type showMeTheXaml:XamlDisplay}}">
                <Style.Resources>
                    <ResourceDictionary>
                        <ResourceDictionary.MergedDictionaries>
                            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
                        </ResourceDictionary.MergedDictionaries>

                        <smtxAe:TextDocumentValueConverter x:Key="TextDocumentValueConverter"/>
                    </ResourceDictionary>
                </Style.Resources>
                <Setter Property="VerticalContentAlignment" Value="Bottom" />
                <Setter Property="HorizontalContentAlignment" Value="Right" />
                <Setter Property="local:XamlDisplayEx.ButtonDock" Value="Right" />
                <Setter Property="Formatter">
                    <Setter.Value>
                        <showMeTheXaml:XamlFormatter NewLineOnAttributes="True" Indent="  ">
                            <showMeTheXaml:XamlFormatter.NamespacesToRemove>
                                <system:String>http://materialdesigninxaml.net/winfx/xaml/themes</system:String>
                            </showMeTheXaml:XamlFormatter.NamespacesToRemove>
                        </showMeTheXaml:XamlFormatter>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="showMeTheXaml:XamlDisplay">
                            <DockPanel>
                                <materialDesign:PopupBox DockPanel.Dock="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:XamlDisplayEx.ButtonDock)}"
                                                         Padding="10" StaysOpen="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                         x:Name="PopupBox">
                                    <materialDesign:PopupBox.ToggleContent>
                                        <materialDesign:PackIcon Kind="Xaml" Cursor="Hand" ToolTip="View XAML" 
                                                                 Foreground="{DynamicResource PrimaryHueDarkBrush}" 
                                                                 Background="Transparent" 
                                                                 Margin="3">
                                            <materialDesign:PackIcon.Style>
                                                <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                                                    <Setter Property="Opacity" Value="0.2" />
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Opacity" Value="1" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </materialDesign:PackIcon.Style>
                                        </materialDesign:PackIcon>
                                    </materialDesign:PopupBox.ToggleContent>
                                    <Border MaxHeight="600" MaxWidth="800">
                                        <DockPanel>
                                            <Button
                                                Margin="0 10 0 0"
                                                Tag="{Binding Xaml, RelativeSource={RelativeSource TemplatedParent}}"
                                                HorizontalAlignment="Right"
                                                Command="Copy"
                                                CommandParameter="{Binding Xaml, RelativeSource={RelativeSource TemplatedParent}}"
                                                Content="_COPY"
                                                DockPanel.Dock="Bottom"
                                                Style="{StaticResource MaterialDesignRaisedButton}">
                                            </Button>
                                            <avalonEdit:TextEditor Document="{Binding Xaml, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TextDocumentValueConverter}}" 
                                                                   Style="{StaticResource AvalonTextEditorXamlDisplay}" />
                                        </DockPanel>
                                    </Border>

                                </materialDesign:PopupBox>
                                <Grid>
                                    <AdornerDecorator>
                                        <Border BorderBrush="{DynamicResource SecondaryAccentBrush}" Opacity=".4" Margin="-5">
                                            <Border.Style>
                                                <Style TargetType="Border">
                                                    <Setter Property="BorderThickness" Value="0" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding ElementName=PopupBox, Path=IsPopupOpen}" Value="True">
                                                            <Setter Property="BorderThickness" Value="5" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Border.Style>
                                        </Border>
                                    </AdornerDecorator>
                                    <ContentPresenter />
                                </Grid>
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                <Style.BasedOn>
                    <Style TargetType="{x:Type ButtonBase}">
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        <Setter Property="materialDesign:RippleAssist.Feedback" Value="White"/>
                        <Setter Property="Cursor" Value="Hand"/>
                        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1"/>
                        <Setter Property="FontWeight" Value="Medium"/>
                        <Setter Property="FontSize" Value="14"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Padding" Value="16,4"/>
                        <Setter Property="Height" Value="32"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
                        <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="0.4"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ButtonBase}">
                                    <Grid>
                                        <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                            <Grid>
                                                <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                                                    <Border.Effect>
                                                        <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                            <Binding.Converter>
                                                                <Converters:ShadowConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </Border.Effect>
                                                </Border>
                                                <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}}">
                                                    <ProgressBar.Visibility>
                                                        <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                                            <Binding.Converter>
                                                                <BooleanToVisibilityConverter/>
                                                            </Binding.Converter>
                                                        </Binding>
                                                    </ProgressBar.Visibility>
                                                </ProgressBar>
                                            </Grid>
                                        </AdornerDecorator>
                                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                        </Trigger>
                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                            <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" Value="0.23"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
