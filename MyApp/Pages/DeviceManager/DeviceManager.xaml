<domain:UCBase
             xmlns:domain="clr-namespace:MyApp.Domain"
             xmlns:conv="clr-namespace:MyApp.Converters"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MyApp.Pages.DeviceManager"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes" 
             xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
             x:Class="MyApp.Pages.DeviceManager.DeviceManager"
             xmlns:my="clr-namespace:MyApp.Pages.DeviceManager"
             mc:Ignorable="d" 
             d:DesignHeight="450"
             d:DesignWidth="800">
    <domain:UCBase.Resources>
        <conv:InverseBooleanConverter x:Key="InverseBooleanConverter"></conv:InverseBooleanConverter>
        <!--How to sort Ccombobox items-->
        <!--<CollectionViewSource Source="{Binding Path=BaudRates}" x:Key="cvs">
            <CollectionViewSource.SortDescriptions>
                <scm:SortDescription />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        ItemsSource="{Binding Source={StaticResource cvs}}"/>-->
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Style.BasedOn>
                <Style TargetType="{x:Type ButtonBase}">
                    <Setter Property="FocusVisualStyle">
                        <Setter.Value>
                            <Style>
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Margin="2" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                    <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
                    <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                    <Setter Property="materialDesign:RippleAssist.Feedback" Value="White"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1"/>
                    <Setter Property="FontWeight" Value="Medium"/>
                    <Setter Property="FontSize" Value="14"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="16,4"/>
                    <Setter Property="Height" Value="32"/>
                    <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
                    <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="0.4"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                <Grid>
                                    <AdornerDecorator CacheMode="{Binding (materialDesign:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                        <Grid>
                                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="2">
                                                <Border.Effect>
                                                    <Binding Path="(materialDesign:ShadowAssist.ShadowDepth)" RelativeSource="{RelativeSource TemplatedParent}">
                                                        <Binding.Converter>
                                                            <Converters:ShadowConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </Border.Effect>
                                            </Border>
                                            <ProgressBar x:Name="ProgressBar" Background="{Binding (materialDesign:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (materialDesign:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (materialDesign:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (materialDesign:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (materialDesign:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (materialDesign:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (materialDesign:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ButtonBase}}}">
                                                <ProgressBar.Visibility>
                                                    <Binding Path="(materialDesign:ButtonProgressAssist.IsIndicatorVisible)" RelativeSource="{RelativeSource TemplatedParent}">
                                                        <Binding.Converter>
                                                            <BooleanToVisibilityConverter/>
                                                        </Binding.Converter>
                                                    </Binding>
                                                </ProgressBar.Visibility>
                                            </ProgressBar>
                                        </Grid>
                                    </AdornerDecorator>
                                    <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                    </Trigger>
                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                        <Setter Property="materialDesign:ShadowAssist.Darken" TargetName="border" Value="True"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.23"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.BasedOn>
        </Style>
    </domain:UCBase.Resources>
    <domain:UCBase.DataContext>
        <local:DeviceManagerViewModel x:Name="DeviceManagerViewModel"/>
    </domain:UCBase.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="132"/>
        </Grid.ColumnDefinitions>

        <StackPanel DockPanel.Dock="Right" 
                    Margin="16 16 0 0"
                    Width="100" Grid.Column="1">
            <!--Available devices-->
            <ComboBox Margin="0 16 0 0"
                      IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}"
                      ItemsSource="{Binding AvailableDevice }"
                      SelectedItem="{Binding SelectedDevice}"/>
            <!--Baudrate-->
            <ComboBox Margin="0 16 0 0"
                      IsEnabled="{Binding IsConnected, Converter={StaticResource InverseBooleanConverter}}"
                      ItemsSource="{Binding BaudRates}"
                      SelectedItem="{Binding SelectedBaudRate}"/>

            <Button   Margin="0 16 0 0"
                Command = "{Binding ConnectComand}" >
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonStyle1}">
                        <!--<Setter Property="Button.Content" Value="...." />-->
                        <!--<Setter Property="IsEnabled" Value="False" />-->
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ConnectionState}" Value="{x:Static my:DeviceConnectionState.NotConfigured}">
                                <Setter Property="Content" Value="Connect" />
                                <Setter Property="IsEnabled" Value="False" />
                            </DataTrigger>
                            <DataTrigger  Binding="{Binding ConnectionState}" Value="{x:Static my:DeviceConnectionState.Connected}">
                                <Setter Property="Content" Value="Disconnect" />
                                <Setter Property="IsEnabled" Value="True" />
                            </DataTrigger>
                            <DataTrigger  Binding="{Binding ConnectionState}" Value="{x:Static my:DeviceConnectionState.CanConnect}">
                                <Setter Property="Content" Value="Connect" />
                                <Setter Property="IsEnabled" Value="True" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
        <Button Content="Send Command" 
                HorizontalAlignment="Stretch" 
                VerticalAlignment="Top"
                Command="{Binding SendCmdCommand}"
                IsEnabled="{Binding IsConnected}"/>
    </Grid>
</domain:UCBase>
